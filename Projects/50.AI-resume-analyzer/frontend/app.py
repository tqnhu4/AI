# frontend/app.py
import streamlit as st
import requests
import base64
import json
import os
import uuid # ƒê·ªÉ t·∫°o session_id cho chatbot

# --- C·∫•u h√¨nh API Endpoint (Thay th·∫ø b·∫±ng URL API Gateway c·ªßa b·∫°n) ---
# L∆ØU √ù: Trong m√¥i tr∆∞·ªùng s·∫£n ph·∫©m, h√£y s·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng ho·∫∑c c·∫•u h√¨nh an to√†n h∆°n.
# V√≠ d·ª•: https://xxxxxxxxx.execute-api.ap-southeast-1.amazonaws.com/dev
API_GATEWAY_URL = os.getenv("API_GATEWAY_URL", "YOUR_API_GATEWAY_INVOKE_URL_HERE") 

st.set_page_config(layout="wide", page_title="AI Resume Analyzer & Career Assistant")

st.title("üß† AI Resume Analyzer & Career Assistant üöÄ")
st.markdown("T·∫£i CV c·ªßa b·∫°n l√™n ƒë·ªÉ nh·∫≠n ph√¢n t√≠ch, l·ªùi khuy√™n v√† luy·ªán ph·ªèng v·∫•n AI.")

# --- Kh·ªüi t·∫°o session_id cho chatbot n·∫øu ch∆∞a c√≥ ---
if "session_id" not in st.session_state:
    st.session_state.session_id = str(uuid.uuid4())

# --- Tab Navigation ---
tab1, tab2 = st.tabs(["Ph√¢n t√≠ch CV", "Chatbot Ph·ªèng v·∫•n"])

with tab1:
    st.header("Upload CV c·ªßa b·∫°n")
    uploaded_file = st.file_uploader("Ch·ªçn file CV (PDF ho·∫∑c DOCX)", type=["pdf", "docx"])

    if uploaded_file is not None:
        file_details = {"filename": uploaded_file.name, "filetype": uploaded_file.type, "filesize": uploaded_file.size}
        st.write(file_details)

        # ƒê·ªçc n·ªôi dung file v√† m√£ h√≥a Base64
        file_content = uploaded_file.read()
        encoded_content = base64.b64encode(file_content).decode('utf-8')
        
        file_extension = uploaded_file.name.split('.')[-1].lower()

        st.info("ƒêang ph√¢n t√≠ch CV c·ªßa b·∫°n, vui l√≤ng ch·ªù trong gi√¢y l√°t...")

        try:
            # G·ª≠i y√™u c·∫ßu ƒë·∫øn API Gateway Lambda
            response = requests.post(
                f"{API_GATEWAY_URL}/analyze-cv",
                json={
                    "file_content": encoded_content,
                    "file_type": file_extension
                },
                headers={
                    "X-Session-Id": st.session_state.session_id # G·ª≠i session_id cho backend
                }
            )
            response.raise_for_status() # N√©m l·ªói cho c√°c m√£ tr·∫°ng th√°i HTTP x·∫•u
            result = response.json()

            st.success("Ph√¢n t√≠ch ho√†n t·∫•t!")

            st.subheader("N·ªôi dung CV ƒë√£ ph√¢n t√≠ch:")
            st.text_area("VƒÉn b·∫£n CV", result.get('parsed_text', 'Kh√¥ng c√≥ n·ªôi dung'), height=300)

            st.subheader("K·ªπ nƒÉng ƒë∆∞·ª£c tr√≠ch xu·∫•t:")
            st.write(result.get('extracted_skills', ['Kh√¥ng t√¨m th·∫•y k·ªπ nƒÉng']))

            st.subheader("L·ªùi khuy√™n t·ª´ AI Career Advisor:")
            st.markdown(result.get('career_advice', 'Kh√¥ng c√≥ l·ªùi khuy√™n.'))

            st.subheader("G·ª£i √Ω ng√†nh ngh·ªÅ ph√π h·ª£p:")
            st.markdown(result.get('career_suggestions', 'Kh√¥ng c√≥ g·ª£i √Ω ng√†nh ngh·ªÅ.'))

            st.subheader("C√°c c√¥ng vi·ªác ph√π h·ª£p:")
            matching_jobs = result.get('matching_jobs', [])
            if matching_jobs:
                for job in matching_jobs:
                    st.write(f"**{job['title']}** (ƒêi·ªÉm ph√π h·ª£p: {job['score']:.2f})")
                    st.markdown(f"_{job['description']}_")
            else:
                st.write("Kh√¥ng t√¨m th·∫•y c√¥ng vi·ªác ph√π h·ª£p.")

        except requests.exceptions.RequestException as e:
            st.error(f"L·ªói khi g·ªçi API: {e}. Vui l√≤ng ki·ªÉm tra API Gateway URL v√† k·∫øt n·ªëi m·∫°ng.")
            if e.response is not None:
                st.error(f"M√£ l·ªói HTTP: {e.response.status_code}")
                st.error(f"Ph·∫£n h·ªìi t·ª´ API: {e.response.text}")
        except json.JSONDecodeError:
            st.error("L·ªói: Ph·∫£n h·ªìi t·ª´ API kh√¥ng ph·∫£i l√† JSON h·ª£p l·ªá.")
            if response is not None:
                st.error(f"Ph·∫£n h·ªìi th√¥: {response.text}")
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën: {e}")

with tab2:
    st.header("Chatbot Ph·ªèng v·∫•n AI")

    # L∆∞u tr·ªØ l·ªãch s·ª≠ chat
    if "messages" not in st.session_state:
        st.session_state.messages = []
    if "cv_text_for_interview" not in st.session_state:
        st.session_state.cv_text_for_interview = ""
    if "interview_started" not in st.session_state:
        st.session_state.interview_started = False

    # Hi·ªÉn th·ªã tin nh·∫Øn c≈©
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

    col1, col2 = st.columns([3, 1])
    with col1:
        cv_text_input = st.text_area("D√°n n·ªôi dung CV c·ªßa b·∫°n v√†o ƒë√¢y ƒë·ªÉ chatbot tham kh·∫£o (t√πy ch·ªçn, nh∆∞ng khuy·∫øn kh√≠ch ƒë·ªÉ ph·ªèng v·∫•n s√°t h∆°n):", height=200, key="cv_text_for_interview_input")
    with col2:
        job_description_input = st.text_area("M√¥ t·∫£ c√¥ng vi·ªác (t√πy ch·ªçn):", height=200, key="job_description_for_interview_input")

    if st.button("B·∫Øt ƒë·∫ßu Ph·ªèng v·∫•n", key="start_interview_button"):
        if not cv_text_input:
            st.warning("Vui l√≤ng d√°n n·ªôi dung CV ƒë·ªÉ b·∫Øt ƒë·∫ßu ph·ªèng v·∫•n.")
        else:
            st.session_state.cv_text_for_interview = cv_text_input
            st.session_state.job_description_for_interview = job_description_input
            st.session_state.messages = [] # X√≥a l·ªãch s·ª≠ chat c≈©
            st.session_state.interview_started = True
            
            with st.spinner("ƒêang kh·ªüi t·∫°o phi√™n ph·ªèng v·∫•n..."):
                try:
                    response = requests.post(
                        f"{API_GATEWAY_URL}/interview",
                        json={
                            "action": "start",
                            "cv_text": st.session_state.cv_text_for_interview,
                            "job_description": st.session_state.job_description_for_interview
                        },
                        headers={
                            "X-Session-Id": st.session_state.session_id # G·ª≠i session_id cho backend
                        }
                    )
                    response.raise_for_status()
                    result = response.json()
                    st.session_state.messages.append({"role": "assistant", "content": result.get('response', 'L·ªói kh·ªüi t·∫°o.')})
                    st.rerun()
                except requests.exceptions.RequestException as e:
                    st.error(f"L·ªói khi b·∫Øt ƒë·∫ßu ph·ªèng v·∫•n: {e}")
                    if e.response is not None:
                        st.error(f"M√£ l·ªói HTTP: {e.response.status_code}")
                        st.error(f"Ph·∫£n h·ªìi t·ª´ API: {e.response.text}")
                    st.session_state.interview_started = False
                except Exception as e:
                    st.error(f"L·ªói kh√¥ng mong mu·ªën khi b·∫Øt ƒë·∫ßu ph·ªèng v·∫•n: {e}")
                    st.session_state.interview_started = False

    if st.session_state.interview_started:
        user_input = st.chat_input("Tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa nh√† tuy·ªÉn d·ª•ng:")
        if user_input:
            st.session_state.messages.append({"role": "user", "content": user_input})
            with st.chat_message("user"):
                st.markdown(user_input)

            with st.spinner("AI ƒëang suy nghƒ©..."):
                try:
                    response = requests.post(
                        f"{API_GATEWAY_URL}/interview",
                        json={
                            "action": "continue",
                            "user_response": user_input
                        },
                        headers={
                            "X-Session-Id": st.session_state.session_id # G·ª≠i session_id cho backend
                        }
                    )
                    response.raise_for_status()
                    result = response.json()
                    ai_response = result.get('response', 'L·ªói ph·∫£n h·ªìi.')
                    st.session_state.messages.append({"role": "assistant", "content": ai_response})
                    with st.chat_message("assistant"):
                        st.markdown(ai_response)
                except requests.exceptions.RequestException as e:
                    st.error(f"L·ªói khi ti·∫øp t·ª•c ph·ªèng v·∫•n: {e}")
                    if e.response is not None:
                        st.error(f"M√£ l·ªói HTTP: {e.response.status_code}")
                        st.error(f"Ph·∫£n h·ªìi t·ª´ API: {e.response.text}")
                except Exception as e:
                    st.error(f"L·ªói kh√¥ng mong mu·ªën khi ti·∫øp t·ª•c ph·ªèng v·∫•n: {e}")

        if st.button("K·∫øt th√∫c Ph·ªèng v·∫•n", key="end_interview_button"):
            with st.spinner("ƒêang k·∫øt th√∫c ph·ªèng v·∫•n v√† t√≥m t·∫Øt..."):
                try:
                    response = requests.post(
                        f"{API_GATEWAY_URL}/interview",
                        json={
                            "action": "end"
                        },
                        headers={
                            "X-Session-Id": st.session_state.session_id # G·ª≠i session_id cho backend
                        }
                    )
                    response.raise_for_status()
                    result = response.json()
                    st.session_state.messages.append({"role": "assistant", "content": result.get('response', 'L·ªói k·∫øt th√∫c.')})
                    st.session_state.interview_started = False
                    st.rerun()
                except requests.exceptions.RequestException as e:
                    st.error(f"L·ªói khi k·∫øt th√∫c ph·ªèng v·∫•n: {e}")
                    if e.response is not None:
                        st.error(f"M√£ l·ªói HTTP: {e.response.status_code}")
                        st.error(f"Ph·∫£n h·ªìi t·ª´ API: {e.response.text}")
                except Exception as e:
                    st.error(f"L·ªói kh√¥ng mong mu·ªën khi k·∫øt th√∫c ph·ªèng v·∫•n: {e}")
